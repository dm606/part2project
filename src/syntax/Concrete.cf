-- Input to the read-eval-print loop
ReplExpression. ReplStructure ::= Exp SEMISEMI ;
ReplDeclarations. ReplStructure ::= ListListDeclaration SEMISEMI ;
ReplCommand. ReplStructure ::= Command SEMISEMI ;

-- Using [[Decl]] instead of this causes a compilation error
LLDEmpty. ListListDeclaration ::= ;
LLDCons. ListListDeclaration ::= [Decl] ListListDeclaration ;

-- For parsing files
FileExpression. FileStructure ::= Exp FileStructureTail ;
FileTail. FileStructure ::= FileStructureTail ;

FileTailEnd. FileStructureTail ::= ;
FileTailEnd2. FileStructureTail ::= SEMISEMI ;
FileTailDeclaration. FileStructureTail ::= [Decl] FileStructureTail ;
FileTailDeclaration2. FileStructureTail ::= SEMISEMI [Decl] FileStructureTail ;
FileTailExpression. FileStructureTail ::= SEMISEMI Exp FileStructureTail ;
FileTailCommand. FileStructureTail ::= Command FileStructureTail ;
FileTailCommand2. FileStructureTail ::= SEMISEMI Command FileStructureTail ;

-- Commands
CommandNone. Command ::= "#" Ident ;
CommandString. Command ::= "#" Ident String ;

-- Expressions
-- EArrow, ETimes, EMatch, and lists in ELambda are syntactic sugar
EPair. Exp ::= Exp3 "," Exp ;
ELambda. Exp1 ::= "fun" [Binder] "->" Exp1 ;
EFunction. Exp1 ::= "function" [Case] ;
EMatch. Exp1 ::= "match" Exp "with" [Case] ;
EArrow. Exp2 ::= Exp3 "->" Exp2 ;
-- Using [Binder] instead of Binder in EPi and ESigma requires a GLR parser
EPi. Exp2 ::= "(" Binder ":" Exp ")" "->" Exp2 ;
EDeclaration. Exp2 ::= [Decl] "in" Exp2 ;
ESigma. Exp3 ::= "(" Binder ":" Exp ")" "*" Exp3 ;
ETimes. Exp3 ::= Exp4 "*" Exp3 ;
EApplication. Exp4 ::= Exp4 Exp5 ;
EUniverse. Exp5 ::= "Type" Integer ;
EUnindexedUniverse. Exp5 ::= "Type" ;
EUnitType. Exp5 ::= "Unit" ;
EUnit. Exp5 ::= "()" ;
EIdentifier. Exp5 ::= Ident ;
EProj1. Exp5 ::= Exp5 ".1" ;
EProj2. Exp5 ::= Exp5 ".2" ;
EMeta. Exp5 ::= "?" ;
-- Should not be in user input
EMetaInternal. Exp5 ::= "?" Integer;
coercions Exp 5 ;

-- Binders
BName. Binder ::= Ident ;
BUnderscore. Binder ::= "_" ;
separator nonempty Binder "" ;

-- Cases
CCase. Case ::= Pattern "->" Exp2 ;
-- This allows the first case of a function or match expression to begin with a
-- |, but also allows multiple |s to seperate cases
_. Case ::= "|" Case ;
separator Case "|" ;

-- Patterns
PPair. Pattern ::= Pattern1 "," Pattern ;
PApplication. Pattern1 ::= Ident [Pattern2] ;
PIdentifier. Pattern2 ::= Ident ;
PUnderscore. Pattern2 ::= "_" ;
PInaccessible. Pattern2 ::= "." Exp5 ;
separator nonempty Pattern2 "" ;
coercions Pattern 2 ;

-- Declarations
DLet. Decl ::= "let" Ident [Parameter] ":" Exp "=" Exp ;
DLetRec. Decl ::= "let" "rec" Ident [Parameter] ":" Exp "=" Exp ;
DType. Decl ::= "type" Ident [Parameter] ":" Exp "=" [Constructor] ;
DSimpleType. Decl ::= "type" Ident "=" [Constructor] ;
separator nonempty Decl "and" ;

-- Parameters
Param. Parameter ::= "(" Binder ":" Exp ")" ;
separator Parameter "" ;

-- Constructors
Constr. Constructor ::= Ident ":" Exp2 ;
-- This allows the first constructor of a type to begin with a |, but also
-- allows multiple |s to seperate cases
_. Constructor ::= "|" Constructor ;
separator Constructor "|" ;

-- Give this token a specific name so that it can be refered to in other code
token SEMISEMI {";;"} ; 

comment "(*" "*)" ;
entrypoints ReplStructure,FileStructure ;
