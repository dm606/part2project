-- Parser for read-eval-print loop
-- Parses a single declaration or expression, followed by ;;
ReplExpression. ReplInput ::= Exp SEMISEMI ;
ReplDeclaration. ReplInput ::= [Decl] SEMISEMI ;
-- Give this token a specific name so that it can be refered to in other code
-- Requires a version of BNFC >= 2.7.1
token SEMISEMI {";;"} ; 

-- Expressions
-- EArrow, ETimes, EMatch, and lists in ELambda are syntactic sugar
EPair. Exp ::= Exp2 "," Exp ;
ELambda. Exp2 ::= "fun" [Binding] "->" Exp1 ;
-- Using [Binding] instead of Binding in EPi and ESigma requires a GLR parser
EPi. Exp1 ::= "(" Binding ":" Exp ")" "->" Exp1 ;
ESigma. Exp2 ::= "(" Binding ":" Exp ")" "*" Exp2 ;
EFunction. Exp2 ::= "function" [Case] ;
EDeclaration. Exp ::= [Decl] "in" Exp ;
EApplication. Exp3 ::= Exp3 Exp4 ;
EUniverse. Exp4 ::= "U" ;
EUnitType. Exp4 ::= "Unit" ;
EUnit. Exp4 ::= "()" ;
EIdentifier. Exp4 ::= Ident ;
EProj1. Exp4 ::= Exp4 ".1" ;
EProj2. Exp4 ::= Exp4 ".2" ;
EArrow. Exp1 ::= Exp2 "->" Exp1 ;
ETimes. Exp2 ::= Exp3 "*" Exp2 ;
EMatch. Exp2 ::= "match" Exp "with" [Case] ;
coercions Exp 4 ;

-- Bindings
BName. Binding ::= Ident ;
BUnderscore. Binding ::= "_" ;
separator nonempty Binding "" ;

-- Cases
CCase. Case ::= Pattern "->" Exp1 ;
-- This allows the first case of a function or match expression to begin with a
-- |, but also allows multiple |s to seperate cases
_. Case ::= "|" Case ;
separator Case "|" ;

-- Patterns
PPair. Pattern ::= Pattern1 "," Pattern ;
PApplication. Pattern1 ::= Ident [Pattern2] ;
PIdentifier. Pattern2 ::= Ident ;
PUnderscore. Pattern2 ::= "_" ;
separator nonempty Pattern2 "" ;
coercions Pattern 2 ;

-- Declarations
DLet. Decl ::= "let" Ident ":" Exp "=" Exp ;
DLetRec. Decl ::= "let" "rec" Ident ":" Exp "=" Exp ;
DType. Decl ::= "type" Ident [Parameter] ":" Exp "=" [Constructor] ;
DSimpleType. Decl ::= "type" Ident "=" [Constructor] ;
separator nonempty Decl "and" ;

-- Parameters
Param. Parameter ::= "(" Binding ":" Exp ")" ;
separator Parameter "" ;

-- Constructors
Constr. Constructor ::= Ident ":" Exp ;
-- This allows the first constructor of a type to begin with a |, but also
-- allows multiple |s to seperate cases
_. Constructor ::= "|" Constructor ;
separator Constructor "|" ;

comment "(*" "*)" ;
entrypoints ReplInput ;
