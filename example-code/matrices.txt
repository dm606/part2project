type Nat = zero : Nat | succ : Nat -> Nat

type Vec (A : Type) : Nat -> Type = 
  | vnil : Vec A zero
  | vcons : {n : Nat} -> A -> Vec A n -> Vec A (succ n)

let rec vadd {A : Type} (f : A -> A -> A) {n : Nat} (v1 : Vec A n) (v2 : Vec A n) : Vec A n = 
  match v1, v2 with
  | vnil, vnil -> vnil
  | vcons a v1, vcons b v2 -> vcons (f a b) (vadd f v1 v2)

type Matrix (A : Type) : Nat -> Nat -> Type =
  | nil : {n : Nat} -> Matrix A zero n
  | cons : {m : Nat} -> {n : Nat} -> Vec A n -> Matrix A m n -> Matrix A (succ m) n

let rec add {A : Type} (f : A -> A -> A) {m : Nat} {n : Nat} (m1 : Matrix A m n) (m2 : Matrix A m n) : Matrix A m n =
  match m1, m2 with
  | nil, nil -> nil A n
  | cons v1 m1, cons v2 m2 -> cons (vadd f v1 v2) (add f m1 m2)
