type Nat = zero : Nat | succ : Nat -> Nat

let rec ack (m : Nat) (n : Nat) : Nat = match m, n with
    | zero, n -> succ n
    | succ m, zero -> ack m (succ zero)
    | succ m, succ n -> ack m (ack (succ m) n)

type Bool = false : Bool | true : Bool

let rec is_even : Nat -> Bool = function
  | zero -> true
  | succ zero -> false
  | succ (succ x) -> is_even x

let maj : Bool * Bool * Bool -> Bool = function
  | true, true, true -> true
  | true, false, z -> z
  | false, y, true -> y
  | x, true, false -> x
  | false, false, false -> false


type Id {A : Type} (a : A) : A -> Type =
  | refl : Id a a

type Null =

let false_elim {A : Type} : Null -> A = function

let proof : (n : Nat) -> (p : Id n zero -> Null) -> (m : Nat) * Id n (succ m) =
  function
  | zero -> (fun p -> false_elim (p refl))
  | succ m -> (fun _ -> (m, refl))

let rec add (m : Nat) (n : Nat) : Nat = match m with
  | zero -> n
  | succ m -> succ (add m n)

let cong {A : Type} {B : Type} {x : A} {y : A} (f : A -> B) : Id x y -> Id (f x) (f y) =
  function
  | refl -> refl

let rec add_zero : (n : Nat) -> Id n (add n zero) = function
  | zero -> refl
  | succ n -> cong succ (add_zero n)

type Vec (A : Type) : Nat -> Type =
  | nil : Vec A zero
  | cons : {n : Nat} -> A -> Vec A n -> Vec A (succ n)

type Fin : Nat -> Type =
  | fzero : {n : Nat} -> Fin (succ n)
  | fsucc : {n : Nat} -> Fin n -> Fin (succ n)

let rec nth {A : Type} {n : Nat} (i : Fin n) (l : Vec A n) : A = match i, l with
  | fzero, cons a tl -> a
  | fsucc i, cons a tl -> nth i tl

let rec map {A : Type} {B : Type} {n : Nat} (f : A -> B) : Vec A n -> Vec B n =
  function
  | nil -> nil
  | cons a tl -> cons (f a) (map f tl)

let id {A : Type} (a : A) : A = a

let rec zeroes : (n : Nat) -> Vec Nat n = function
  | zero -> nil
  | succ n -> cons zero (zeroes n)

let zeroes {n : Nat} : Vec Nat n = zeroes n

let rec add_zero : (n : Nat) -> Id n (add n zero) = function
  | zero -> refl
  | succ n -> cong succ (add_zero n)
