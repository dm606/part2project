type Bool = false : Bool | true : Bool

let if (A : Type) (b : Bool) (l : A) (r : A) : A = match b with
  | true -> l
  | false -> r

type List (A : Type) : Type = 
  | nil : List A 
  | cons : A -> List A -> List A

(* insertion into an already sorted list *)
let rec insert (A : Type) (lt : A -> A -> Bool) (a : A) : List A -> List A =
  function
  | nil .A -> cons A a (nil A)
  | cons .A b l ->
      if (List A) (lt a b) (cons A a (cons A b l)) (cons A b (insert A lt a l))

let rec insert_sort (A : Type) (lt : A -> A -> Bool) : List A -> List A =
  let rec aux (acc : List A) : List A -> List A = function
    | nil .A -> acc
    | cons .A a l -> aux (insert A lt a acc) l in
  aux (nil A)




type Nat = zero : Nat | succ : Nat -> Nat

let one : Nat = succ zero
let two : Nat = succ one
let three : Nat = succ two
let four : Nat = succ three
let five : Nat = succ four
let six : Nat = succ five

let rec lt_nat (x : Nat) (y : Nat) : Bool = match x, y with
  | _, zero -> false
  | zero, succ _ -> true
  | succ x, succ y -> lt_nat x y

let list : List Nat = 
  let n : List Nat = nil Nat in
  let c : Nat -> List Nat -> List Nat = cons Nat in
  insert_sort Nat lt_nat (c four (c three (c two (c one (c zero n)))))
