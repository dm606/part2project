(* the equality type *)
type Eq (A : U) (a : A) : A -> U = refl : Eq A a a

(* if a = b, then f a = f b *)
let cong (A : U) (B : U) (f : A -> B) (a : A) (b : A) :
  Eq A a b -> Eq B (f a) (f b) =
  function refl .A .a -> refl B (f a)

type Monoid = monoid :
  (* the type *)
  (A : U) 
  (* the monoid operation *)
  -> (f : A -> A -> A)
  (* the identity element *)
  -> (id : A)
  (* proof of associativity *)
  -> ((a : A) -> (b : A) -> (c : A) -> Eq A (f a (f b c)) (f (f a b) c))
  (* proof that id is the identity *)
  -> ((a : A) -> (Eq A a (f id a)) * (Eq A a (f a id)))
  -> Monoid


type Nat = zero : Nat | succ : Nat -> Nat

let rec add (x : Nat) (y : Nat) : Nat = match x with
  | zero -> y
  | succ x -> succ (add x y)

(* proof that add is associative *)
let rec add_associativity : (a : Nat) -> (b : Nat) -> (c : Nat)
  -> Eq Nat (add a (add b c)) (add (add a b) c) =
  function
  | zero -> (fun b c -> refl Nat (add b c))
  | succ a -> (fun b c ->
      cong Nat Nat succ (add a (add b c))
        (add (add a b) c) (add_associativity a b c))

let rec add_zero : (n : Nat) -> Eq Nat n (add n zero) = function
  | zero -> refl Nat zero
  | succ n -> cong Nat Nat succ n (add n zero) (add_zero n)

(* proof that a + zero = a = zero + a for all a *)
let zero_identity (a : Nat) :
  (Eq Nat a (add zero a)) * (Eq Nat a (add a zero)) = (refl Nat a, add_zero a)

(* Nat with add and zero forms a monoid *)
let Nat_monoid : Monoid = monoid Nat add zero add_associativity zero_identity


type List (A : U) : U =
  | nil : List A
  | cons : A -> List A -> List A

let rec append (A : U) : List A -> List A -> List A = function
  | nil .A -> (fun y -> y)
  | cons .A a tl -> (fun y -> cons A a (append A tl y))

(* proof that append is associative *)
let rec append_associativity (A : U) : (a : List A) -> (b : List A)
  -> (c : List A) 
  -> Eq (List A) (append A a (append A b c)) (append A (append A a b) c) =
  function
  | nil .A -> (fun b c -> refl (List A) (append A b c))
  | cons .A a tl -> (fun b c ->
      cong (List A) (List A) (cons A a) (append A tl (append A b c))
        (append A (append A tl b) c) (append_associativity A tl b c))

let rec append_nil (A : U) :
  (l : List A) -> Eq (List A) l (append A l (nil A)) =
  function
  | nil .A -> refl (List A) (nil A)
  | cons .A a tl ->
      cong (List A) (List A) (cons A a) tl (append A tl (nil A)) (append_nil A tl)

let nil_identity (A : U) (l : List A) :
  (Eq (List A) l (append A (nil A) l)) * (Eq (List A) l (append A l (nil A))) =
  (refl (List A) l, append_nil A l)

let List_monoid (A : U) : Monoid =
  monoid (List A) (append A) (nil A) (append_associativity A) (nil_identity A)


type Bool = true : Bool | false : Bool

let conj (x : Bool) (y : Bool) : Bool = match x, y with
  | true, true -> true
  | true, false -> false
  | false, true -> false
  | false, false -> false

(* proof that conjunction is associative *)
let conj_associativity (a : Bool) (b : Bool) (c : Bool) :
  Eq Bool (conj a (conj b c)) (conj (conj a b) c) =
  match a, b, c with  
  | true, true, true -> refl Bool true
  | true, true, false -> refl Bool false
  | true, false, true -> refl Bool false
  | true, false, false -> refl Bool false
  | false, true, true -> refl Bool false
  | false, true, false -> refl Bool false
  | false, false, true -> refl Bool false 
  | false, false, false -> refl Bool false

