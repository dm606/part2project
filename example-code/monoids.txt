(* the equality type *)
type Eq {A : Type} (a : A) : A -> Type = refl : Eq a a

(* if a = b, then f a = f b *)
let subst {A : Type} {B : Type} (f : A -> B) (a : A) (b : A) :
  Eq a b -> Eq (f a) (f b) =
  function refl -> refl

type Monoid : Type 1 = monoid :
  (* the type *)
  {A : Type}
  (* the monoid operation *)
  -> (f : A -> A -> A)
  (* the identity element *)
  -> (id : A)
  (* proof of associativity *)
  -> ((a : A) -> (b : A) -> (c : A) -> Eq (f a (f b c)) (f (f a b) c))
  (* proof that id is the identity *)
  -> ((a : A) -> (Eq a (f id a)) * (Eq a (f a id)))
  -> Monoid


type Nat = zero : Nat | succ : Nat -> Nat

let rec add (x : Nat) (y : Nat) : Nat = match x with
  | zero -> y
  | succ x -> succ (add x y)

(* proof that add is associative *)
let rec add_associativity : (a : Nat) -> (b : Nat) -> (c : Nat)
  -> Eq (add a (add b c)) (add (add a b) c) =
  function
  | zero -> (fun b c -> refl)
  | succ a -> (fun b c ->
      subst succ (add a (add b c))
        (add (add a b) c) (add_associativity a b c))

let rec add_zero : (n : Nat) -> Eq n (add n zero) = function
  | zero -> refl 
  | succ n -> subst succ n (add n zero) (add_zero n)

(* proof that a + zero = a = zero + a for all a *)
let zero_identity (a : Nat) :
  (Eq a (add zero a)) * (Eq a (add a zero)) = (refl, add_zero a)

(* Nat with add and zero forms a monoid *)
let Nat_monoid : Monoid = monoid add zero add_associativity zero_identity


